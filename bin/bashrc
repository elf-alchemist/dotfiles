#!/usr/bin/env bash
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: Copyright 2024 Guilherme M. Miranda <alchemist.software@proton.me>

# path
export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:="${HOME}/.config"}"
export XDG_CACHE_HOME="${XDG_CACHE_HOME:="${HOME}/.cache"}"
export XDG_DATA_HOME="${XDG_DATA_HOME:="${HOME}/.local/share"}"
export XDG_STATE_HOME="${XDG_STATE_HOME:="${HOME}/.local/state"}"
export XDG_RUNTIME_DIR="/run/user/${UID}"
export XDG_CONFIG_DIRS="/etc/xdg"
export XDG_DATA_DIRS="/home/alchemist/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share:/usr/share"

export PATH="/usr/games:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
export PATH="${HOME}/.local/games:${HOME}/.local/bin:${HOME}/games:${HOME}/bin:${PATH}"

export XDG_PICTURES_HOME="${XDG_PICTURES_HOME:-"${HOME}/Pictures"}"

# bash
export HISTFILE="${XDG_STATE_HOME}/bash/history"
export HISTCONTROL="ignoreboth"
export HISTSIZE="10000"
export HISTFILESIZE="10000"

shopt -s histappend
shopt -s checkwinsize

if [[ -f "/usr/share/bash-completion/bash_completion" ]]; then
	source "/usr/share/bash-completion/bash_completion"
elif [[ -f "/etc/bash_completion" ]]; then
	source "/etc/bash_completion"
fi

# colored output
if command -v dircolors > /dev/null; then
	test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"

	alias ls='ls --color=auto'
	alias dir='dir --color=auto'
	alias vdir='vdir --color=auto'

	alias grep='grep --color=auto'
	alias fgrep='fgrep --color=auto'
	alias egrep='egrep --color=auto'

	alias diff='diff --color=auto'
fi

# terminal navigation
alias lsl="ls -blahs --time-style=long-iso --color=auto"

alias ..="cd .."
alias .2="cd ../.."
alias .3="cd ../../.."
alias .4="cd ../../../.."

# terminfo
export TERMINFO="${XDG_DATA_HOME}/terminfo"
export TERMINFO_DIRS="${XDG_DATA_HOME}/terminfo:/usr/share/terminfo"

# git
export GIT_PS1_SHOWDIRTYSTATE=true
export GIT_PS1_SHOWSTASHSTATE=true
export GIT_PS1_SHOWUNTRACKEDFILES=true
export GIT_PS1_SHOWUPSTREAM="auto"
export GIT_PS1_STATESEPARATOR=" "
export GIT_PS1_COMPRESSSPARSESTATE=true
export GIT_PS1_SHOWCONFLICTSTATE="yes"
export GIT_PS1_DESCRIBE_STYLE="default"
export GIT_PS1_SHOWCOLORHINTS=true

export GIT_COMPLETION_CHECKOUT_NO_GUESS=1
export GIT_COMPLETION_SHOW_ALL_COMMANDS=1
export GIT_COMPLETION_SHOW_ALL=1
export GIT_COMPLETION_IGNORE_CASE=1

export GIT_PATH="${HOME}/git"
export GIT_CEILING_DIRECTORIES="${GIT_PATH}:${HOME}"

alias cdgit="cd \"\${GIT_PATH}\""

function git-ignore()
{
	curl -fsSL https://www.toptal.com/developers/gitignore/api/$@ > .gitignore
}

function git-license()
{
	curl -fsSL "https://api.github.com/licenses/$1" | jq -r '.body' > LICENSE
}

# tmux
export TMUX_DIR="${XDG_CONFIG_HOME}/tmux"
export TMUX_CONF="${TMUX_DIR}/tmux.conf"
export TPM_DIR="${TMUX_DIR}/plugins/tpm"

function tmux-setup() {
	if [[ -d "${TPM_DIR}" ]]; then rm -rdf "${TPM_DIR}"; return 1; fi
	if ! command -v git &> /dev/null; then echo "error: git not found" ; return 1; fi
	if ! command -v tmux &> /dev/null; then echo "error: tmux not found" ; return 1; fi

	git clone git@github.com:tmux-plugins/tpm.git "${TPM_DIR}" --quiet
	tmux source-file "${TMUX_CONF}"

	echo "Tmux setup successful."
}

# docker
export DOCKER_CONFIG="${XDG_CONFIG_HOME}/docker"
export MACHINE_STORAGE_PATH="${XDG_DATA_HOME}/docker-machine"

# Qt
# export QT_LOGGING_RULES=qt.qpa.*=true
# export QT_DEBUG_PLUGINS=1
# export QSG_INFO=1
# export QT_QPA_PLATFORM="wayland"

# ffmpeg
alias ffmpeg="ffmpeg -hide_banner"
alias ffmpeg-pal="ffmpeg -vf \"palettegen\" palette.png -i "
alias ffmpeg-gif="ffmpeg -framerate 1 -pattern_type glob -i 'image*.png' outgif.gif"

# steam
export STEAMROOT="${XDG_DATA_HOME}/Steam"

# doom
export DOOMWADDIR="${HOME}/doom"
export DOOMWADPATH="/usr/local/share/games/doom:/usr/local/share/doom:/usr/share/games/doom:/usr/share/doom"
export DOOMWADPATH="${DOOMWADDIR}/wads:${DOOMWADDIR}/expansions:${DOOMWADDIR}:${DOOMWADPATH}"
export DOOMWADPATH="${DOOMWADDIR}/playpals:${DOOMWADDIR}/carousel:${DOOMWADDIR}/mods:${DOOMWADPATH}"
export DOOMPORT="chocolate-doom"

alias cdoom="cd \"\${DOOMWADDIR}\""

alias lsexp="ls \"\${DOOMWADDIR}\"/expansions | sed 's/\.wad$//' | tr '\n' ' ' && echo -e '\n'"
alias lswads="ls \"\${DOOMWADDIR}\"/wads      | sed 's/\.wad$//' | tr '\n' ' ' && echo -e '\n'"
alias lsmods="ls \"\${DOOMWADDIR}\"/mods      | sed 's/\.wad$//' | tr '\n' ' ' && echo -e '\n'"
alias lscaro="ls \"\${DOOMWADDIR}\"/carousel  | sed 's/\.wad$//' | tr '\n' ' ' && echo -e '\n'"
alias lspals="ls \"\${DOOMWADDIR}\"/playpals  | sed 's/\.wad$//' | tr '\n' ' ' && echo -e '\n'"
alias lsdoom="clear && lsexp && lswads && lsmods && lscaro && lspals"

alias symwoof="sudo ln -sfn \"\${DOOMWADDIR}\"/woof.pk3 /usr/local/share/woof/woof.pk3 && sudo ln -sfn \"\${DOOMWADDIR}\"/woof.pk3 /usr/local/share/nugget-doom/nugget-doom.pk3"
alias symslade="sudo ln -sfn \"\${DOOMWADDIR}\"/slade.pk3 /usr/share/slade/slade.pk3"

alias cmake-make="sudo make install -j\$(nproc) -C build/"
alias cmake-build="cmake -DCMAKE_BUILD_TYPE=\"Release\" -DCMAKE_EXPORT_COMPILE_COMMANDS=\"ON\" -B build/ --fresh"

function bulk_sc55mk2_gs() {
	count=${1:-1}
	for mid_file in *.mid; do
		# simple render midi to wav
		[[ -d "./wav" ]] || mkdir wav;
		nuked-sc55-render \
			--instances $count \
			--romset mk2 \
			--rom-directory "/usr/local/share/nuked-sc55" \
			--reset gs \
			-o ./wav/"${mid_file%.mid}".wav \
			"${mid_file}";
		# convert wav to ogg
		[[ -d "./ogg" ]] || mkdir ogg;
		ffmpeg \
			-y \
			-i ./wav/"${mid_file%.mid}".wav \
			-af "volume=10dB" \
			./ogg/"${mid_file%.mid}".ogg;
		echo "Finished rendering ${mid_file}"
	done
}

function bulk_sc55mk2_gm() {
	count=${1:-1}
	for mid_file in *.mid; do
		# simple render midi to wav
		[[ -d "./wav" ]] || mkdir wav;
		nuked-sc55-render \
			--instances $count \
			--romset mk2 \
			--rom-directory "/usr/local/share/nuked-sc55" \
			--reset gm \
			-o ./wav/"${mid_file%.mid}".wav \
			"${mid_file}";
		# convert wav to ogg
		[[ -d "./ogg" ]] || mkdir ogg;
		ffmpeg \
			-y \
			-i ./wav/"${mid_file%.mid}".wav \
			-af "volume=10dB" \
			./ogg/"${mid_file%.mid}".ogg;
		echo "Finished rendering ${mid_file}"
	done
}

function bulk_sc55mk1_gs() {
	count=${1:-1}
	for mid_file in *.mid; do
		# simple render midi to wav
		[[ -d "./wav" ]] || mkdir wav;
		nuked-sc55-render \
			--instances $count \
			--romset mk1 \
			--rom-directory "/usr/local/share/nuked-sc55" \
			--reset gs \
			-o ./wav/"${mid_file%.mid}".wav \
			"${mid_file}";
		# convert wav to ogg
		[[ -d "./ogg" ]] || mkdir ogg;
		ffmpeg \
			-y \
			-i ./wav/"${mid_file%.mid}".wav \
			-af "volume=10dB" \
			./ogg/"${mid_file%.mid}".ogg;
		echo "Finished rendering ${mid_file}"
	done
}


function bulk_sc55mk1_gm() {
	count=${1:-1}
	for mid_file in *.mid; do
		# simple render midi to wav
		[[ -d "./wav" ]] || mkdir wav;
		nuked-sc55-render \
			--instances $count \
			--romset mk1 \
			--rom-directory "/usr/local/share/nuked-sc55" \
			--reset gm \
			-o ./wav/"${mid_file%.mid}".wav \
			"${mid_file}";
		# convert wav to ogg
		[[ -d "./ogg" ]] || mkdir ogg;
		ffmpeg \
			-y \
			-i ./wav/"${mid_file%.mid}".wav \
			-af "volume=10dB" \
			./ogg/"${mid_file%.mid}".ogg;
		echo "Finished rendering ${mid_file}"
	done
}

function bulk_fluidsynth() {
	SOUNDFONT="${HOME}/.local/share/soundfonts/gm-windows.sf2"
	for mid_file in *.mid; do
		# simple render midi to wav
		! [[ -d "./wav" ]] && mkdir wav;
		fluidsynth \
			-ni "$SOUNDFONT" \
			"$mid_file" \
			-F "./wav/${mid_file%.mid}.wav" \
			-r 44100;

		# convert wav to ogg
		! [[ -d "./ogg" ]] && mkdir ogg;
		ffmpeg \
			-i ./wav/"${mid_file%.mid}".wav \
			-af "volume=10dB" \
			./ogg/"${mid_file%.mid}".ogg \
			-y;
		echo "Finished rendering ${mid_file}"
	done
}

if command -v woof &> /dev/null; then
	export DOOMPORT="woof"
	alias woof="woof -verbose -shotdir \${HOME}/Pictures/Woof"

	alias wd="woof -iwad doom2 -file"
	alias wdu="woof -iwad doomu -file"

	alias wdtnt="woof -iwad tnt"
	alias wdplut="woof -iwad plutonia"

	alias wdhacx="woof -iwad hacx"
	alias wdrekkr="woof -iwad rekkrsl"

	alias wdchex="woof -iwad chex3v"
	alias wdchex-fttc="woof -iwad fttc_chex3v"

	alias wfd1="woof -iwad freedoom1"
	alias wfd2="woof -iwad freedoom2"

	alias wcdce="woof -iwad cdce"
fi


# misc
function setup-discord() {
	tmp_dir=$(mktemp -d)
	curl "https://discord.com/api/download?platform=linux&format=deb" \
		--location \
		--silent \
		--show-error \
		--output "${tmp_dir}/discord.deb"
	sudo dpkg -i "${tmp_dir}/discord.deb" 2>/dev/null
	rm -rdf "${tmp_dir}"
	sh -c "$(curl -sS https://raw.githubusercontent.com/Vendicated/VencordInstaller/main/install.sh)"
}

function rename_to_lowercase() {
  # Check if the folder path is passed as an argument
  if [ -z "$1" ]; then
    echo "Please provide a directory path."
    return 1
  fi

  DIR="$1"

  # Loop through each file in the directory
  for FILE in "$DIR"/*; do
    # Get the filename without the path
    FILENAME=$(basename "$FILE")

    # Convert the filename to lowercase
    LOWERCASE_FILENAME=$(echo "$FILENAME" | tr '[:upper:]' '[:lower:]')

    # Rename the file if the lowercase version is different
    if [[ "$FILENAME" != "$LOWERCASE_FILENAME" ]]; then
      mv "$DIR/$FILENAME" "$DIR/$LOWERCASE_FILENAME"
    fi
  done

  echo "All files in $DIR have been renamed to lowercase!"
}

remove_file_extension() {
  # Check if the directory is provided, or use the current directory
  DIR="${1:-.}"

  # Loop through each file in the directory
  for FILE in "$DIR"/*; do
    # Check if it's a file
    if [[ -f "$FILE" ]]; then
      # Get the filename without the path
      FILENAME=$(basename "$FILE")

      # Remove the file extension (everything after the last dot)
      FILENAME_NO_EXT="${FILENAME%.*}"

      # Rename the file if it has an extension
      if [[ "$FILENAME" != "$FILENAME_NO_EXT" ]]; then
        mv "$FILE" "$DIR/$FILENAME_NO_EXT"
      fi
    fi
  done

  echo "All file extensions removed in $DIR!"
}


rename_underscores() {
    # Loop through all files in the current directory
    for file in *; do
        # Check if the file name contains an underscore
        if [[ "$file" == *"_"* ]]; then
            # Replace underscores with hyphens
            new_name="${file//_/-}"

            # Rename the file
            mv -- "$file" "$new_name"
            echo "Renamed: $file -> $new_name"
        fi
    done
}

PROMPT_COMMAND='__git_ps1 "\[\e[1;34m\]\W\[\e[1;0m\]" " "'

